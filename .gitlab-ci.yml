build:
  stage: build
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - docker info
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:deps || true
    - docker pull $CI_REGISTRY_IMAGE:builder || true
    - docker build
      --target deps
      --cache-from=$CI_REGISTRY_IMAGE:deps
      -t $CI_REGISTRY_IMAGE:deps .
    - docker push $CI_REGISTRY_IMAGE:deps
    - docker build
      --target builder
      --cache-from=$CI_REGISTRY_IMAGE:deps
      --cache-from=$CI_REGISTRY_IMAGE:builder
      -t $CI_REGISTRY_IMAGE:builder .
    - docker push $CI_REGISTRY_IMAGE:builder
    - docker build
      --target runner
      --cache-from=$CI_REGISTRY_IMAGE:deps
      --cache-from=$CI_REGISTRY_IMAGE:builder
      -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  stage: deploy
  image: "registry.gitlab.com/gitlab-org/cluster-integration/cluster-applications:v1.1.0"
  environment:
    name: archive-workers
  script:
    - gl-ensure-namespace $KUBE_NAMESPACE
    - kubectl create secret docker-registry gitlab-registry
      --docker-server="$CI_REGISTRY" --docker-username="$CI_DEPLOY_USER"
      --docker-password="$CI_DEPLOY_PASSWORD" --docker-email="$GITLAB_USER_EMAIL"
      -o yaml --dry-run | kubectl apply -f -
    - kubectl apply -f $ENV_FILE
    - gl-helmfile -n $KUBE_NAMESPACE --file $CI_PROJECT_DIR/helmfile.yaml apply --suppress-secrets
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

